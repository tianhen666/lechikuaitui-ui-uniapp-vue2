<template>
  <view>
    <!--












		注意：这是 H5、微信小程序界面，请勿和 new_index.nvue、index.nvue 混用

		1. new_index.nvue、index.nvue这两个是App页面

		2. 另外：data.js 是上一版本留下的假数据，这一版改成了 URL 请求了（如不需要可以删除，也可作为后端请求参考）

		3. 请各位大神多多留手，我已经把请求内存开到最大了

		4. 视频 id 切记是字符串类型









		 -->
    <!-- #ifdef MP -->
    <swiper
      :style="
        'width: ' + windowWidth + 'px; height: ' + windowHeight + 'px; background-color: #000000;'
      "
      :vertical="true"
      @animationfinish="animationfinish"
      @change="change"
      :current="current"
      :indicator-dots="false"
      @touchstart="mpTouchstart"
      @touchend="mpTouchend"
    >
      <swiper-item v-for="(list, index) in dataList" :key="index">
        <view v-if="Math.abs(k - index) <= 1">
          <view style="font-size: 0;">
            <!--
						1.v-if：用于控制视频在节点的渲染数
						2.muted的默认值是 false，代表默认是禁音视频的
						3.http-cache默认开启视频缓存
						4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
						5.show-loading：这里默认去掉播放转圈的标志
						v-if="Math.abs(k-index)<=1"
						 -->
            <video
              v-if="isShow"
              :id="list._id + '_' + index"
              :loop="true"
              :muted="list.isplay"
              :controls="false"
              :http-cache="true"
              :page-gesture="false"
              :show-fullscreen-btn="false"
              :show-loading="false"
              :show-center-play-btn="false"
              :enable-progress-gesture="false"
              :src="list.src"
              @ended="ended"
              @tap.stop="tapVideoHover(list.state, $event)"
              :style="
                'width: ' +
                  windowWidth +
                  'px; height: ' +
                  windowHeight +
                  'px; background-color: #000000; z-index: -1;'
              "
              :poster="list.src + '?x-oss-process=video/snapshot,t_100,f_jpg'"
            ></video>
            <!--
						1.这里是封面（方案二）：这里的封面可以自定义。
						2.也在代码中做了批注，两种方案可以共存，不会相互影响。
						-->
            <image
              v-if="!list.playIng"
              :src="list.src + '?x-oss-process=video/snapshot,t_100,f_jpg'"
              :style="
                'width: ' + windowWidth + 'px; height: ' + windowHeight + 'px; position: absolute;'
              "
              mode="aspectFit"
            ></image>
          </view>
          <!-- 播放状态：pause 的时候就会暂停 -->
          <view
            class="videoHover"
            @tap.stop="tapVideoHover(list.state, $event)"
            :style="'width: ' + windowWidth + 'px; height: ' + windowHeight + 'px;'"
          >
            <image
              v-if="list.state == 'pause'"
              class="playState"
              src="@/static/img/index/play.png"
            ></image>
          </view>
          <!-- 最底下的文字部分 -->
          <view class="content">
            <text class="userName" :style="'width: ' + (windowWidth - 90) + 'px;'">
              {{ list.title }}
            </text>
            <!-- i={{i}} -->
            <text class="words" :style="'width: ' + (windowWidth - 90) + 'px;'">
              {{ list.msg }}-{{ k + 1 }}
            </text>
            <!-- k={{k}} -->
          </view>
        </view>
      </swiper-item>
    </swiper>
    <!-- #endif -->
    <!-- #ifdef H5 -->
    <swiper
      :style="
        'width: ' + windowWidth + 'px; height: ' + windowHeight + 'px; background-color: #fff;'
      "
      :vertical="true"
      @animationfinish="animationfinish"
      @change="change"
      :current="current"
      :indicator-dots="false"
      :duration="duration"
    >
      <swiper-item v-for="(list, index) in dataList" :key="index">
        <view
          v-if="Math.abs(k - index) <= 1"
          :style="'width: ' + windowWidth + 'px; height: ' + windowHeight + 'px;'"
        >
          <view style="position: absolute;">
            <!--
						1.v-if：用于控制视频在节点的渲染数
						2.muted的默认值是 false，代表默认是禁音视频的
						3.http-cache默认开启视频缓存
						4.poster（封面（方案一））：这里的封面默认处理存储在阿里云的视频
						5.show-loading：这里默认去掉播放转圈的标志
						v-if="Math.abs(k-index)<=1"
						 -->
            <video
              v-if="isShow"
              :id="list._id + '_' + index"
              :loop="false"
              :muted="list.isplay"
              :controls="false"
              :http-cache="true"
              :page-gesture="false"
              :show-fullscreen-btn="false"
              :show-loading="false"
              :show-center-play-btn="false"
              :enable-progress-gesture="false"
              :src="list.src"
              @ended="ended"
              @timeupdate="timeupdate"
              @loadedmetadata="endLoading"
              @tap.stop="tapVideoHover(list.state, $event)"
              :style="
                'width: ' +
                  boxStyle.width +
                  'px; height: ' +
                  boxStyle.height +
                  'px; background-color: #000000; z-index: -1;'
              "
              :poster="list.src + '?vframe/jpg/offset/1/w/600'"
            ></video>
            <!--
						1.这里是封面（方案二）：这里的封面可以自定义。
						2.也在代码中做了批注，两种方案可以共存，不会相互影响。
						-->
            <image
              v-if="!list.playIng"
              :src="list.src + '?vframe/jpg/offset/1/w/600'"
              :style="
                'width: ' +
                  boxStyle.width +
                  'px; height: ' +
                  boxStyle.height +
                  'px; position: absolute;'
              "
              mode="aspectFit"
            ></image>
          </view>

          <!-- 播放状态：pause 的时候就会暂停 -->
          <view
            class="videoHover"
            @tap.stop="tapVideoHover(list.state, $event)"
            :style="'width: ' + boxStyle.width + 'px; height: ' + boxStyle.height + 'px;'"
          >
            <image
              v-if="list.state == 'pause'"
              class="playState"
              src="@/static/img/index/play.png"
            ></image>
          </view>

          <!-- 门诊信息 等一些按钮 -->
          <view style="position: absolute;width: 100%;bottom: 0;">
            <!-- 最底下的文字部分 -->
            <view class="content" :style="'width: ' + (boxStyle.width - 90) + 'px;'">
              <text class="userName">{{ list.title }}</text>
              <text class="words" v-if="list.msg"># {{ list.msg }}</text>
            </view>

            <view style="margin:-10px -20px;">
              <u-slider
                v-model="dataList[k].playbackProgress"
                blockSize="10"
                min="0"
                style="margin:10rpx 30rpx;"
                backgroundColor="#d0d0d099"
                block-color="#ffffff99"
                activeColor="#007aff99"
                @changing="sliderChange"
                @change="sliderChange"
                step="0.05"
                :max="dataList[k].totalProgress"
              ></u-slider>
            </view>

            <!-- 门诊信息 有邀请人 -->
            <m-business-card-video-invitation
              v-if="!!invitationID && invitationID != userInfo.id"
            ></m-business-card-video-invitation>

            <!-- 门诊信息 没有邀请人 -->
            <m-business-card-video></m-business-card-video>
          </view>
        </view>
      </swiper-item>
    </swiper>
    <!-- #endif -->
  </view>
</template>

<script>
import { getSourceMaterialId, getSourceMaterial } from '@/api/materialLibrary.js';
import wx from '@/wxJsSDK/index.js';
import { mapState, mapGetters } from 'vuex';
import { delay } from '@/utils/index.js';
let audo = uni.createInnerAudioContext();
audo.loop = false;
export default {
  data() {
    return {
      windowWidth: 0,
      windowHeight: 0,
      platform: '',
      model: '',
      deleteHeight: 0,
      dataList: [],
      k: 0,
      oldVideo: '',
      voice: '',
      timeout: '',
      current: 0,
      boxStyle: {
        //视频，图片封面样式🌟💗
        height: 0,
        width: 0
      },

      classID: '', //分类ID
      total: 2, //视频总量
      mVideoID: '', // 视频ID
      pageNo: 1, // 当前分页
      pageSize: 10, // 一页多少个

      videoID: '', // 视频ID
      isShow: false,

      showPlay: false, //转轮显示控制
      rotates: 0, //转轮旋转角度
      rotateTime: '', //转轮递归事件控制
      xrotats: '', // 定时器ID
      mpcleartime: '', // 点击时间
      isClick: false,
      changeTimeout: '',
      mptime: 0,
      mpstartTime: 0,
      duration: 500
    };
  },
  computed: {
    ...mapState({
      tenantInfo: state => state.tenant.info,
      userInfo: state => state.user.userInfo,
      invitationTenantInfo: state => state.tenant.invitationInfo,
      invitationUserInfo: state => state.user.invitationInfo
    }),
    ...mapGetters(['isMember', 'isTenantExpired'])
  },
  watch: {
    async k(k, old_k) {
      // console.log(k, old_k);
      // #ifndef MP
      this.clearToTime();
      // #endif
      this.isShow = false;
      this.dataList[old_k].playIng = false; //如果视频暂停，就加载封面
      this.dataList[old_k].isplay = true;
      this.dataList[old_k].state = 'pause';
      console.log('预留第' + (old_k + 1) + '个视频：' + this.dataList[old_k]._id + '_' + old_k);
      // 2.0版本已经去掉了下面这一句，视频不用暂停，只需要把声音禁止就行
      uni.createVideoContext(this.dataList[old_k]._id + '_' + old_k, this).stop(); //如果视频暂停，那么旧视频停止，这里的this.dataList[old_k]._id + '_' + old_k，后面加 old_k 是为了每一个视频的 id 值不同，这样就可以大程度的避免串音问题
      console.log('已经暂停 --> 第' + (old_k + 1) + '个视频～'); //提示
      this.dataList[k].state = 'play';
      this.isShow = true;
      this.xrotats = setTimeout(() => {
        this.showPlay = true;
        // #ifndef MP
        this.rotateX();
        // #endif
      }, 200);
      // #ifdef MP
      // 如果是小程序端
      clearTimeout(this.changeTimeout);
      this.dataList[k].isplay = false;
      setTimeout(() => {
        this.dataList[k].playIng = true;
      }, 250);
      if (this.mptime < 0.2) {
        this.changeTimeout = setTimeout(() => {
          uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).play();
        }, 1400);
      } else {
        uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).play();
      }
      // #endif
      // #ifdef H5
      this.dataList[k].isplay = true;
      audo.src = this.dataList[k].src;
      if (this.isClick) {
        setTimeout(() => {
          if (typeof WeixinJSBridge == 'undefined') {
            setTimeout(() => {
              audo.play();
              uni.createVideoContext(this.dataList[k]._id + '_' + k, this).seek(0);
              uni.createVideoContext(this.dataList[k]._id + '_' + k, this).play();
              setTimeout(() => {
                this.dataList[k].playIng = true;
              }, 650);
            }, 500);
          } else {
            WeixinJSBridge.invoke('getNetworkType', {}, e => {
              setTimeout(() => {
                audo.play();
                uni.createVideoContext(this.dataList[k]._id + '_' + k, this).seek(0);
                uni.createVideoContext(this.dataList[k]._id + '_' + k, this).play();
                setTimeout(() => {
                  this.dataList[k].playIng = true;
                }, 850);
              }, 200);
            });
          }
        }, 200);
      } else {
        audo.pause();
        this.dataList[k].state = 'pause';
        uni.createVideoContext(this.dataList[k]._id + '_' + k, this).seek(0);
        uni.createVideoContext(this.dataList[k]._id + '_' + k, this).pause();
      }
      // #endif
      var p = k + 1;
      console.log('预加载第' + (p + 1) + '个视频：' + this.dataList[p]?._id + '_' + p);
    }
  },
  async onLoad({ id, classId, invitationID, invitationTenantID }) {
    // 等待onLaunch执行完成
    await this.$onLaunched;

    // 设置视频ID
    this.mVideoID = Number(id) || 0;
    // 分类ID
    this.classID = Number(classId) || 0;
    // 设置邀请人的ID
    this.invitationID = Number(invitationID) || 0;
    // 邀请的门诊ID
    this.invitationTenantID = Number(invitationTenantID) || 0;

    // 获取邀请人的, 个人信息, 门诊信息
    if (invitationID && invitationTenantID) {
      this.$store.dispatch('invitationInfoFun', {
        clueId: invitationID,
        tenantId: invitationTenantID
      });

      this.$store.dispatch('getShareTenantInfo', {
        tenantId: invitationTenantID
      });
    }

    /* 判断手机型号 ---start--- */
    this.platform = uni.getSystemInfoSync().platform;
    this.model = uni.getSystemInfoSync().model;
    var model = this.model;
    if (
      this.platform == 'ios' &&
      (model !== 'iPhone6' || model !== 'iPhone6s' || model !== 'iPhone7' || model !== 'iPhone8')
    ) {
      this.deleteHeight = 0; //有 tabbar的 修改这里可以改变视频高度
    }
    /* 判断手机型号 ---end---- */

    /* 初始尺寸信息 start */
    this.windowWidth = uni.getSystemInfoSync().windowWidth;
    this.windowHeight = uni.getSystemInfoSync().windowHeight;
    this.boxStyle.width = this.windowWidth;
    this.boxStyle.height = this.windowHeight - this.deleteHeight - 90; //有 tabbar的 修改这里可以改变视频高度
    /*  初始尺寸信息 end */

    /*  执行---旋转动画 */
    // #ifndef MP
    this.rotateX();
    // #endif

    // 微信jsdk初始化
    wx.initJssdk();

    // 获取一组数据
    this.get();
  },
  onShow() {
    console.log('回到前台');
    if (this.dataList.length !== 0) {
      // #ifdef MP
      this.dataList[this.k].state = 'play';
      uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).play();
      // #endif

      // #ifdef H5
      if (this.isClick) {
        this.dataList[this.k].state = 'play';
        uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).play();
        audo.play();
      }
      // #endif
    }
  },
  onHide() {
    // #ifdef MP
    this.dataList[this.k].state = 'pause';
    uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).pause();
    // #endif

    // #ifdef H5
    if (this.isClick) {
      this.dataList[this.k].state = 'pause';
      uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).pause();
      audo.pause();
    }
    // #endif
    console.log('到后台');
  },
  onUnload() {
    // #ifdef MP
    this.dataList[this.k].state = 'pause';
    uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).pause();
    // #endif

    // #ifdef H5
    if (this.isClick) {
      this.dataList[this.k].state = 'pause';
      uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).pause();
      audo.pause();
    }
    // #endif
    console.log('页面销毁');
  },
  methods: {
    // 小程序端触摸结束
    mpTouchend() {
      this.mptime = new Date() / 1000 - this.mpstartTime;
    },

    // 小程序端触摸开始
    mpTouchstart() {
      this.mpstartTime = new Date() / 1000;
    },

    // 点击显示声音按钮
    dealVoice() {
      uni.showToast({
        title: '处理声音',
        icon: 'none'
      });
    },

    //清理定时器
    clearToTime() {
      for (let i = 0; i < 20; i++) {
        clearTimeout(this.rotateTime);
        clearTimeout(this.xrotats);
        this.showPlay = false;
        this.rotates = 0;
      }
    },

    //清理定时器
    clearTime() {
      for (let i = 0; i < 20; i++) {
        clearTimeout(this.rotateTime);
        clearTimeout(this.xrotats);
      }
    },

    // 转圈函数
    rotateX() {
      // clearTimeout(this.rotateTime);
      this.rotateTime = setTimeout(() => {
        this.rotateX();
        this.showPlay = true;
        this.rotates += 1;
      }, 30);
    },

    // 关闭评论
    closeScrollview() {
      // 点击评论里面的叉叉，就会关闭评论
      this.$refs.pinglun.close();
    },

    // 自动触发下一个视频 loop值设置为false 触发
    ended() {
      // 1.播放当前视频结束时触发，自动切换下一个视频
      this.current = this.k + 1;
    },

    //点击播放&&暂停
    tapVideoHover(state, event) {
      console.log('state--', state);
      if (state == 'play' || state == 'continue') {
        this.dataList[this.k].state = 'pause';
      } else {
        this.dataList[this.k].state = 'continue';
      }
      if (this.dataList[this.k].state == 'continue') {
        this.isClick = true;
        this.dataList[this.k].playIng = true;
        uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).play(); //暂停以后继续播放
        // #ifdef MP
        this.dataList[this.k].isplay = false;
        // #endif
        // #ifdef H5
        audo.play();
        // #endif
      }
      if (this.dataList[this.k].state == 'pause') {
        uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).pause(); //暂停以后继续播放
        // #ifdef MP
        this.dataList[this.k].isplay = true;
        // #endif
        // #ifdef H5
        audo.pause();
        // #endif
      }
    },

    // swiper 切换执行
    async change(event) {
      this.k = event.detail.current;
      // 设置视频ID
      this.videoID = this.dataList[this.k]._id;
      const res = await getSourceMaterialId({
        id: this.videoID,
        clueId: this.invitationID,
        clueTenantId: this.invitationTenantID
      });
      this.wxShare();
    },

    // swiper 切换完成执行
    animationfinish(event) {
      // 1.这里进行判断，如果是最后一个视频就进入 get() 方法加载视频进入列表
      if (this.k == this.dataList.length - 1) {
        this.GET();
      }
    },

    //每一组结束时新的请求
    async GET() {
      if (this.dataList.length >= this.total) {
        return;
      }
      const res = await getSourceMaterial({
        pageNo: this.pageNo,
        pageSize: this.pageSize,
        classId: this.classID,
        type: 2 // 视频分类
      });
      this.pageNo = this.pageNo + 1;
      // 1.这里引入后端请求数据
      const msg = [...res.data.list];
      // 2.这里把视频添加到视频列表
      for (let i = 0; i < msg.length; i++) {
        // 去除当前初始化视频
        if (this.mVideoID != msg[i].id) {
          this.dataList.push({
            playIng: false,
            isplay: true,
            _id: msg[i].id,
            title: msg[i].name,
            state: 'pause',
            src: msg[i].content,
            playbackProgress: 0,
            totalProgress: 0,
            resourceLoading: false
          });
        }
      }
      this.total = res.data.total;
    },

    // 初始化请求的,第一组视频
    async get() {
      this.isShow = false;
      // 稍微延时下,防止邀请人的信息没有加载
      await delay(500);

      const res = await getSourceMaterialId({
        id: this.mVideoID,
        clueId: this.invitationID,
        clueTenantId: this.invitationTenantID
      });

      // 1.这里引入后端请求数据
      var msg = [res.data];

      // 2.这里把视频添加到视频列表
      for (let i = 0; i < msg.length; i++) {
        this.dataList.push({
          playIng: false,
          isplay: true,
          _id: msg[i].id,
          title: msg[i].name,
          msg: msg[i].description,
          state: 'pause',
          src: msg[i].content,
          playbackProgress: 0,
          totalProgress: 0,
          resourceLoading: false
        });
      }

      // 3.显示视频
      this.isShow = true;

      // 如果是小程序端  直接播放视频
      // #ifdef MP
      this.dataList[this.k].isplay = false;
      this.dataList[this.k].state = 'play';
      this.dataList[this.k].playIng = true;
      uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).play();
      // #endif

      // h5端有限制,初始加载不能直接播放
      // #ifdef H5
      this.dataList[this.k].isplay = true;
      this.dataList[this.k].playIng = false;
      // uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).seek(0);
      // uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).pause();
      this.dataList[this.k].state = 'pause';
      audo.src = this.dataList[this.k].src;
      // #endif

      // 赋值视频ID
      this.videoID = this.dataList[this.k]._id;

      // 设置分享
      this.wxShare();

      // 加载列表下一组
      this.GET();
    },

    // 微信jssdk设置分享
    wxShare() {
      // 朋友分享
      wx.updateAppMessageShareData({
        title: `（${this.tenantInfo.name}）${this.dataList[this.k].title}` || '',
        desc: this.dataList[this.k].msg || '',
        link: `${window.location.href.split('?')[0]}?id=${this.dataList[this.k]._id}&classId=${
          this.classID
        }&invitationID=${this.userInfo.id}&invitationTenantID=${this.tenantInfo.id}`,
        imgUrl: this.dataList[this.k].src + '?vframe/jpg/offset/1/w/600'
      });

      // 朋友圈分享
      wx.updateTimelineShareData({
        title: `（${this.tenantInfo.name}）${this.dataList[this.k].title}` || '',
        link: `${window.location.href.split('?')[0]}?id=${this.dataList[this.k]._id}&classId=${
          this.classID
        }&invitationID=${this.userInfo.id}&invitationTenantID=${this.tenantInfo.id}`,
        imgUrl: this.dataList[this.k].src + '?vframe/jpg/offset/1/w/600'
      });
    },

    // 点击分享按钮
    share() {
      uni.showToast({
        title: '分享',
        icon: 'none'
      });
    },

    // 点击评论之后执行
    toComment(index) {
      // 注意点击评论之后会执行这里
      /*
				（1）先加载缓冲
				（2）获取当前视频 ID 信息
				（3）🌟🌟🌟🌟重要🌟🌟🌟🌟
					- 一定要记得看 index.vue 里面
					 uni.setStorageSync("user",this.peopleList[i]);
					 这个东西，用于存储当前用户信息。在 插件里面会使用到这个东西，
					 记得写一下。

				（4）打开评论
				*/

      uni.showToast({
        title: '加载中...',
        icon: 'none',
        position: 'bottom',
        duration: 300
      });
      uni.setStorageSync('videoID', this.dataList[index]._id);
      this.videoID = this.dataList[index]._id;
      this.$refs.pinglun.open('bottom');
    },

    // 点击喜欢时执行
    cLike(sss) {
      this.dataList[this.k].like = !this.dataList[this.k].like;
      const video = this.dataList[this.k];
      sss ? (video.like_n -= 1) : (video.like_n += 1);
    },

    // 播放进度变化时触发
    timeupdate(e) {
      const id = e.target.id.split('_')[1];
      this.dataList[id].playbackProgress = e.detail.currentTime;
    },

    // 加载结束
    endLoading(e) {
      const id = e.target.id.split('_')[1];
      // 资源加载完成
      this.dataList[id].resourceLoading = true;
      // 总进度
      this.dataList[id].totalProgress = e.detail.duration;
    },

    // 进度条变化
    sliderChange(value) {
      audo.seek(value);
      uni.createVideoContext(this.dataList[this.k]._id + '_' + this.k, this).seek(value);
    }
  }
};
</script>

<style scoped>
.container {
  background-color: #000000;
}

.item {
  /* width : 750rpx; */
  background-color: #000000;
  position: relative;
}

.videoHover {
  position: absolute;
  top: 0;
  left: 0;
  flex: 1;
  background-color: rgba(0, 0, 0, 0.1);
  justify-content: center;
  align-items: center;
  box-sizing: border-box;

  /* border-style: dashed;
  border-color: #dd524d;
  border-width: 1px; */
}

.playState {
  padding: 20rpx;
  width: 110rpx;
  height: 110rpx;
  opacity: 0.5;
  background-color: #000000;
  border-radius: 50%;
}

.userInfo {
  position: absolute;
  bottom: 110px;
  right: 10px;
  flex-direction: column;
}

.userAvatar {
  border-radius: 500%;
  margin-bottom: 15px;
  border-style: solid;
  border-width: 2px;
  border-color: #ffffff;
}

.userAvatar {
  width: 100rpx;
  height: 100rpx;
}

.likeIco,
.shareIco,
.commentIco {
  width: 60rpx;
  height: 60rpx;
  margin-top: 15px;
}

.likeNum,
.commentNum,
.shareTex {
  color: #ffffff;
  font-size: 30rpx;
  text-align: center;
  margin: 5px;
}

.likeNumActive {
  color: red;
}

.content {
  padding-left: 20rpx;
  padding-bottom: 20rpx;
  justify-content: flex-start;
  color: #ffffff;
}

.userName {
  font-size: 30rpx;
  color: #ffffff;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
}

.words {
  margin-top: 10rpx;
  font-size: 26rpx;
  color: #ffffff;
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: 1;
  -webkit-box-orient: vertical;
}

.root {
  background-color: #000000;
}
</style>
